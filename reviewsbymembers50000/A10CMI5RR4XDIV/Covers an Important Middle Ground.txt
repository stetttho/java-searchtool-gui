 This book fills a nice niche -- it is practical enough to be useful and accesible to professional programmers (rather than algorithms researchers or academics) but is build on solid theory as well. Aside from this, the book has several features to recommend it: (1) There are "war stories" scattered throughout the text.  These are special sections that describe the author's experience working with algorithmic problems "in the field".  These are particularly interesting because the present false starts and failures along the  way to the final solution.  This is a nice change from the standard model of simply presenting algorithms and proving them correct. (2) Unlike others, such as the popular Cormen, Lieserson, Rivest and Stein text -- which is a bit advanced for beginning study -- this really is an introduction to algorithms. It is quite suitable for, say, undergradutes who have taken a couple of basic CS courses. (3) Chapter 8 is a 250-page "Catalog of Algorithmic Problems".  Here, you will find descriptions of hundreds of standard formulations for algorithmic problems along with the basic solution approaches, and -- this is what really sets it apart -- pointers to implementations of these algorithms.  This is part of the overall emphasis of the book: that of understanding standard algorithms in order to avoid "reinventing the wheel". Overall, I recommend this book for people with some programming experience that would like to take their work to the next level.  Hardcore computer scientists (especially those with a more theoretical bent) may also benefit from this book, but should consider it a supplement to one of the more advanced texts, such as the above-mentioned CLRS.     
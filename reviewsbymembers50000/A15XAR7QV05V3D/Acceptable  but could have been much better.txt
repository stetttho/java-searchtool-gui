 I've been programming in Java for a number of years, including J2EE development, and saw this book as a great opportunity for me to learn more about design patterns in J2EE.  The great reviews about this book pretty much sold me on it. After reading the book, I have mixed feelings and would probably only recommend parts of it.  THE GOOD: The authors emumerate many design patterns and describe how they are related.  In particular, there is one great picture that shows how all of the patterns can work together.  Just knowing what the patterns are, capsule summaries of each, and how they interrelate is pretty worthwhile.  On rare occasion, an example is useful because the applicability of the pattern is clear enough - even without an example. THE BAD: The examples need a lot of work.  A couple of other reviewers has also spotted this and I join them in this critique.  The authors would do much better if they started the book with a one or two larger, more complete examples (say, a banking application or a bookstore application) and then relate the patterns to the implementations of those applications.  Without good examples, the patterns lose credibility. Another general point: because the content is light, much of what I gleaned from the book was "decouple as much as possible, up to a reasonable granularity".  This came accross most prominently in the refactoring parts of the book.  This is not new information and I would suggest that for the next edition, the authors just come out and say this and then start showing examples of where decoupling and replication of components makes the most sense.     
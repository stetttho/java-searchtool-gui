 This book addresses a pragmatic issue. The fact is that no one single textbook or reference can hope to cover all of the details and issues surrounding the enormous Java language. Bookstore shelves are replete with books, including many excellent ones, covering transitions from C/C++ to Java, or developing a major comprehensive project, or focusing upon a specific facet of the language, such as threading, or networking. The Internet can play a major role in this as well. The Sun Java and IBM Developer Domain sites, for example, contain a wealth of information and tutorials. Even personal (home) websites can be found, describing the syntax and basics of Java, so popular a language it is. A different approach is taken here. An intrepid beginner needs more than syntax, and already contains so much bubbling enthusiasm that personal projects will spring from imagination on their own. Two major questions are addressed in detail (albeit obliquely) in this book: 1. Why was the Java language created, when earlier languages purportedly address the same issues? 2. How have the designers formed the infrastructure of that particular aspect of Java, and how does an individual developer implement and expand upon it (at the lowest levels)? This is the function which this book serves, in an ocean of already-existing manuals, tutorials, and references. With this function now clearly defined, the form follows systematically. Some full program examples are provided, when necessary. However, frequently only a program fragment is all that is required, and in fact is ideal, because it removes extraneous distracting details from the flow of the chapter section. After all, even in the excellent O'Reilly "Java Examples In A Nutshell" book, do you not spend much of the time before and after writing the program, hunting around for 'the main key' that makes the program really work? Excellent graphs and class diagrams are provided, reminiscient of O'Reilly's "Java Foundation Classes In A Nutshell", along with developmental history and clear exposition on why that structuring was chosen above all others. Recreate the packages, classes, and relations yourself, independently, with pen and paper, and the utility of this book will quickly be realized: it serves as a bridge, between introductory works, and exhaustive focused references. This book may spend a month or three on your bookshelf after you first buy it. You may even question why you did get it to begin with. Its value will come to you when reflection is needed (self-reflection, that is, not just the Java kind). So, visit numerous websites...Download the .PDF files, and browse the .HTML references. Also, get books that this book supports, and not the other way around. This can include O'Reilly's "Java Examples In A Nutshell", and Wiley And Sons' "Effective VisualAge For Java Version 3". And whenever you need to slow down, and figure out how and why the inheritance and implementation was done the way it was, and which parts of a detailed program really make the gears mesh, dip into this book, write notes furiously, then put it back on the shelf until later, when you need it for succinct clarification once again.     
 I've bought it when it came out, on a whim, right in the Princeton University bookstore: because when I perused it, it looked really good (structure, topics, etc.) And yet, it turned out to be a totally useless as a textbook clunker. If you're already a competent compiler writer, you will recognize the steps and say to yourself, yes, this guys knows the craft; but, if you want to learn, you won't get anywhere. The author has no knack of writing  study materials; he clearly knows his stuff, but either cannot or will not explain what he's doing. He goes very rapidly over the usual stages of developing a compiler without explaining anything at all. This book reminds me Sedgewick's algorithm design books: if you thumb through, they look all right, but once you get to the actual study, they turn out to be skippy, superficial, and totally inadequate to the task.  Get the dragon book and then the Muchnik book instead. Grune's books is OK. Holub's book is helpful, very practical, detailed. I mean, there's tons of books, many good ones. Another very practical one (though totally untheoretical at the same time, so, perhaps excluding the Holub book, it's not equivalent to the rest I've mentioned) is the old book Compiler Design under Unix (or something like that) by  Schreiner...  Life's short, so be selective. With Appel's book, I'd simply tossed some fourty bucks out the window. Maybe if you're a PU student and are taking courses with him, it can be helpful as a supplement, I don't know; but if not, I suggest you give it a pass.     
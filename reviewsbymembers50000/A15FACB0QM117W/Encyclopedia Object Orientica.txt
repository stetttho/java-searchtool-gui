 This book is clearly intended more for use as a reference than a programming "HOW TO" text.  The code samples are extremely trivial, incomplete, and written in a C++-like format.  The authors avoided trying to be too language specific.  This is by design.  After all, object oriented programming can arguably be done in any language.  The point of this book is to describe common programming problems and object oriented designs that solve these problems.  The idea is to get you to think object oriented and take advantage of well understood problems and associated design solutions, rather than tell you how to program.  If you are looking to this book as a programming tutorial look elsewhere as this is definitely a book for people who understand OOD and how to implement OO designs. I use this book as a reference, a sort of encyclopedia of ideas, to assist with design.  I find that I rarely use a pattern as it is written in the book, but instead use a stripped down or altered version of the pattern.  In short this book is a great source of design inspiration, but should be treated as more theory than fact. My only complaint is the writing style is poorly structured and very boring making it a tough read.     
 Here's another short book (195 pages) that cannot be missing from a good software engineer's personal library. Robert L. Glass condenses in 55 facts and 10 fallacies - some of them well known, others more controversial - his vast knowledge of the field.  The 55 facts are subdivided into four main sections:     1. About management    2. About the Life Cycle    3. About Quality    4. About Research  The ten fallacies are instead grouped as follows:     1. About Management    2. About the Life Cycle    3. About Education  This organization could provide a hint as to what sections of the book you'd better read first if you are managing programmers rather than if you're more involved in coding. But in any case, I suggest that whatever your positions, you will be better served by reading it all.  Glass, a member of the "old guard" of software engineering, having been a practitioner of the field since its very beginnings, is a bit wary of espousing the latest trends in software, like eXtreme Programming. Some of his facts and fallacies fly right in the face of some XP principles and practices. See for instance fallacy nr. 3:  Programming can and should be egoless.  How can you reconcile this with collective code ownership and pair programming?. In other instances, he shares some of XP's convictions. See for instance fact 28:  Design is a complex, iterative process. Initial design solutions are usually wrong and certainly not optimal.  In the end, no matter what development process you like best, you're bound to find some controversial statements inside this book. If this makes you think about what you're doing and how successful you're being at it, I think the book will have fulfilled its purpose. By being apparently dogmatic in its format (what sounds more dogmatic than a list of asserted "facts"?) Glass manages to teach us that what you should be avoiding mostly is indeed dogma. In the current climate, dogma typically takes the form of a new development methodology that promises to end all debates on methodology. To fight this, everyone should memorize fallacy 5:  Software needs more methodologies.  Highly recommended!     
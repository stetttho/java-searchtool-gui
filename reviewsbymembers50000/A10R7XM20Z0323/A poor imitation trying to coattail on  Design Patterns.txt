 This book tries to follow on the success of the wonderful book Design Patterns (Gamma, et. al.) but fails miserably. It's been said in other reviews that this is "common sense packaged as wisdom", and this  is not far from the mark. While some of the anti-patterns are mildly  useful -- particularly the ones specifically related to software  development itself -- the ones related to project management are so obvious  and general that all but the novice will roll his or her eyes back with  disbelief that these could be included in a software engineering  book. For instance, the "Corncob Pattern" is a difficult person  who causes problems through destructive behaviors and how to work around  him or her. It's true that we all run into people like this, but this is  supposed to be a book at least _somewhat_ related to software. They have  three patterns that essentially deal with overplanning ("Analysis  Paralysis", "Death by Planning", and "Design by  Committee"), and while I suppose these are possible, too little  planning is much more likely to cause project debacle than too much. In  fairness, they do have a not-enough-planning pattern, "Architecture by  Implication", though this deals with architecture and not  requirements. Believe it or not, "Irrational Managment" is a  "pattern" in an engineering book that discusses what to do if  your boss is the problem. This seems to be a topic best left to Dr. Laura,  in "Ten Stupid Things Managers Do To Mess Up Your Project". I  was unfortunate enough to read "Anti-Patterns" before  "Design Patterns", and the poor quality of the former nearly kept  me from reading the latter. These books are simply not in the same league,  and some might say not even in the same industry. Avoid this book unless  you have very little real-world experience in the software business.     
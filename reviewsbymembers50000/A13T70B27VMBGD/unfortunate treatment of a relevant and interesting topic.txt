 First thing first, I'll come to the review of this book but before that some advice for you... if you are a J2EE architect/developer you'd need to use the contents of this book time and again, but this book is so badly organized and fluffy one can hardly survive the frustration of reading it twice, so make notes the first time you take the pain of going thru this book... following are mine  - the importance of DTOs have come down following EJB2.0 release  - reduce network chattiness, consider following options    -- Session facade: remember not to create a God class, group relevant functions together in each Facade    -- Consider message facade for asynchronous processing of requests where an immediate response is not required    -- consider Command pattern only for prototyping    -- use HashMaps or Value objects for transferring Entity EJB data over indiv get/set methods    -- use LocalHomes for Session Bean to Entity Bean comm  - create a business interface, a superinterface which both the remote and the Bean itself can implement  - strongly recommend RowSet (JDBC 2.0 optional/JDBC 3.0 core) for tabular data transfer  - depending on requirement, strike a balance between Domain Data Objects (Entity EJB data copies) and custom data objects (what the customer wants to see in one shot), remember to make Custom DOs read only  - consider Fast Lane Reader pattern, pretty neat... Consider JDBC for Reading pattern for read-only data  - Dual Persistent Entity Beans, toggle between BMP/CMP EJB by modifying the deployment descriptors  - skip Chapter 4, use 'Service Locator' pattern with caching option for locating and caching EJB homes  - need to generate primary keys, mostly use UUID generation technique discussed in case database's sequences are not enough  - Part 2 of the book is mostly fluff, it discusses everything but 'Best Practices for EJB design and Implementation', which coincidentally is the heading for part 2  - using ANT and jUnit, you call them best practice? No, they are standard practices  - model domain/persistence/services/clients in that order  - in discussing alternatives to Entity EJBs author laudes JDOs too much, I suggest you check out the 'Hibernate' project, looks more intuitive than JDO (to me)  - Chapter 9 (EJB design Strategies, Idioms and Tips) is actually pretty good, probably because this is the only chapter that's not fluffy, thank you Floyd    -- don't use Composite Entity Bean Pattern, good suggestion Floyd    -- field validation on Entity beans? Use (define and implement) get/set-XXXfield methods since you can't implement the get/set-XXX methods    -- prefer scheduled updates to real-time computations    -- Message Beans - use serialized classes to enable type checking    -- call setRollbackOnly and NOT Rollback, when App exceptions occur    -- limit parameters for EJB create, don't pass DTOs    -- don't use XML as a DTO mechanism, good eye-opener for XML fans Okay, now the review comes...   Many of us J2EE developers and architects alike encounter a large decision tree while architecting/modeling enterprise-class systems with the help of EJBs, it becomes very difficult to weigh all the options available and all the customized treatment of EJBs on different J2EE containers over and above the minimum req or what's provided in SUN's reference implementation, most of us recognize a need for performance improvement in this area and a need to recognize the best practices or patterns to be used to help solve the frequent and recurring problems. For this very reason this book 'could have' been such an invaluable asset to the J2EE community, but alas this should have remained a bulky chapter in Ed Roman's 'Mastering EJB (2nd Edition)' book, the content has been fluffed beyond repair in this book and that's the last thing one needs in a patterns book, keep it short and organized. The Author has not found a way to organize the pattern contents in a logical manner, due to this most of the chapters look like one loooooong paragraph each, organize. Author defines and talks about patterns and antipatterns in the same tone. The code examples I gather would be helpful for beginners. All in all, this book contains a lot of content I would not advise people to miss, but the book is not worth buying, download and read it from the website, theServerside. In addition, I suggest  - J2EE Design patterns: Deepak Alur et al  - Design Patterns: Eric gamma et al... read it only if you are a pattern gung-ho     
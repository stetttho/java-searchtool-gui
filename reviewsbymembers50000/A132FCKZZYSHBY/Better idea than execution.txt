 OK, i *know* i'm going to get beaten up for picking on a classic like this, but i just did something most people i know who own this book never do - i read the whole thing cover to cover. And here's what i learned - the authors are not very intelligent, the book is hopelessly biased towards the author's preferences (OOP and extreme programming; it also seemed CORBA heavy, but i'm not sure they actually implied CORBA was the best), the format or the way they used it was worthless, most of the points they make are unjustified (and wrong) assertions and the authors love to talk about things they have no background or experience in (a good chunk of the book is spent in an amateurish attempt at psychology, telling you about the personal insecurities and what not of people you don't like) Bottom line, after reading this, there's nothing you can really do to change your projects or your software i don't expect you to believe me, so let me quote some pieces of the book Problem: email is bad because it puts things in writing. Solution: don't use it for criticism. Quote: "e-mail discussion groups send dozens of postings on all kinds of topics, including the trivial and nonessential. These lengthy discussions are time-consuming and labor-intensive." Antipattern: Irrational Managment. Refactored Solution: Rational Decision Making. Quote: "the manager may have... personality limitations that cause them to be ineffective or irrational managers... Refactored Solution... 1. Admit you have a problem and get help." Antipattern: Functional Decomposition. Refactored Solution: Object Oriented Reengineering. Symptoms and Consequences:  "- An incredibly degenerate architecture that completely misses the point of object-oriented architecture.  - No hope of ever obtaining software reuse.  - Frustration and hopelessness on the part of testers." Causes: "- those who generate specifications and requirements don't necessarily have real experience with object-oriented system." And so on and so on. Of course, if you don't see the problems in the above and think these are perfectly intelligent, realistic, constructive, actionable things to say in a book on how to improve software, then maybe this is the book for you On a final note, the title of the book "Antipatterns - Refactoring software, architectures and projects in crisis" sounds like it applies to all systems development. Instead, the book is 100% focused on OOP. OOP is good, but i would have made that obvious on the cover so you know what you're getting. Hate to recommend this to people writing or maintaining VB, COBOL, ERP, CRM or other systems only to have them learn that there's nothing they can do with it     
 If possible I'd award 3.5 stars.  There is value in the book, which has two main levels: (1) makes a case for the deplorable state of IT as a business enabler (2) claims IT is now viewed as a commodity In (1) what Carr has to say is true and has been for as long as I've been in the profession, which is over 25 years.  Carr's contentions parallel my experience on this level. When I started out we "MIS" professionals were the priests and priestesses who worked our magic in glass rooms.  We were merely arrogant then.  Life was simpler and some vendors worked closely with us.  IBM, which is my main background, had a reputation for never letting their customers fail. That is not to say that their recommendations and solutions always translated into business value for their customers, but rarely did they result in disasters either.  As time went on though MIS became IS, then IT.  Systems grew more complex, proprietary systems gave way to interoperability, then open systems, and new vendors started arriving in droves.  Innovation fanned the flames of complexity, and IT remained arrogant, but began focusing so much on the technology (and trying to keep up with it) that they lost sight of business needs.  Methods devolved into chaos and the chasm between IT and the business widened to the point where IT was in some cases counter-productive to business needs. On the second level, where Carr claims that IT is now viewed as a commodity, is where this book gets interesting.  In many areas that has been going on for over a decade.  Mass storage systems are measured in pennies per MB, powerful desktop systems are priced in the same range as consumer entertainment electronics, and certain classes of applications software are bargains.  Further, the open source movement is changing the dynamics as I write this review, which may one day render much software as a commodity. What Carr does not do is give clear advice about how to deal with problems and new dynamics that have roots in the distant past.  The status quo is clearly and accurately documented in this book, but the prescription is vague.  That is where this book falls short.   The main value of this book is as stated by others:  use it as a mirror if you work in IT. Perhaps a few brave souls with leadership skills will start changes in the profession that will have a ripple effect. Especially if those brave souls work for large enterprises and get sufficient press for their successes.  At the very least the CxOs who may stumble across this book may see their own IT organization in the descriptions Carr gives and decide to do something about it.  I would also hope that those who work on the vendor and product development side take a few hints from this book and craft their technology innovations into actionable solutions that will get IT back on track.  It can be done, especially if the ingenuity those vendors exhibit in technology innovation can be extended to bundled products that also contain innovative solutions and consulting. One final comment:  a colleague distinguished between intellectual capital and task-oriented work performed by IT.  Obviously the task-oriented work is a commodity, and with some analysis can be identified and outsourced.  That is a step towards getting IT back on track and delivering value to business. There are other such ideas hiding in this book if one reads it with an open and inquiring mind.     
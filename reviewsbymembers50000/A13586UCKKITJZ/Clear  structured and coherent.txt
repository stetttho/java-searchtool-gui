 This well written book starts with a coherent definition of what web service are and how they fit within the framework of a coherent architecture. I like the way the author uses terminology to which I can relate to explain the inner workings of services.  I am intimately familiar with processes, procedure calls and the such, so the examples and illustrations used to describe the models were crystal clear.  I also liked the layered approach to architecture, which is the hallmark of a well-thought out design; as well as the distinction between physical and logical design. In addition, the analogies made using CORBA, for example, to underscore the fact that a well designed architecture is a structured collection of services, developed as discrete components or objects, reinforces the notion of reusability and highlights the importance taking a component-based software engineering approach to web services architecture. The chapters devoted to XML (technical primer and using XML) were clear explanations of this important facet of web architecture.  If you are coming from a legacy background or are attempting to web-enable systems in support of enterprise application integration, these two chapters will get you quickly up-to-speed.  Chapter 5, Web Services Models, is the heart of this book and should be carefully read by architects and the design team; chapter 7, Building a Web Services Workflow, is essential reading for functional analysts, the creative and technical members of the design team, and QA.  A nice touch is how the author used a hotel reservation system as an example to marry theory with a realistic web-based application. As a non-developer I thought the way the author kept the level of abstraction above actual code (although example code is provided) and made examples independent of any particular development environment was a masterful way of describing the process of architecture without getting bogged down into details that have more to do with coding than design or seeing the grand scheme.  Too many authors are developers at heart and cannot resist details that lose the attention of the intended audience - architects in the case of this book. He wisely left out the gory details associated with the build phase of a web project, and also showed wisdom by not attempting to get lost in scalability, performance or other issues that would merit another book to cover.  As such this book is focused, and provides a structured and coherent framework for component-based software engineering approach to web architecture.  If you or your team is not committed to doing up-front design and architecture you may not find this book very useful.  However, if you want to see how employing sound architectural principles to web systems design can be done, or are working in a mature development environment, you will find this book well written and the approach consistent with best practices in software engineering and architecture.     